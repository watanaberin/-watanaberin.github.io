<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学外语如何毁了我</title>
    <url>/post/2369de45.html</url>
    <content><![CDATA[<p>原文 from youtube <a href="https://www.youtube.com/watch?v=ZZ_4gzoDDAE">学外语如何毁了我</a></p>
<p>In summer 2015 when I was walking by Magus Books, my favorite bookstore in Seattle. At 3 AM morning, my eyes were immediately caught by the title of a book in the yellow glim behind the window. So I went the next morning, bought it, and read it. The book was properly not the best collection of essays I had read, but the title has since then stayed with me “The Moral Obligation To Be Intelligent”. What does that have to do with learning languages? <span id="more"></span>Does speaking foreign languages make you more intelligent? Depends. Is the ability to speak another language part of intelligence? Not necessarily. But being intelligent and knowing foreign languages do share one thing in common: they are both painful. And by “painful” I don’t mean the ennui of tediously long lectures or vocabulary and grammatical studies or the expense of time for the pursuit of wisdom and knowledge nor even the loneliness your dedication to the endeavor could bring upon you. The pain, the true torment, is the confusion. For the bigger the circle of the known, the greater the contact with the unknown, and the more firmly unlearnt beliefs used to stand, the more helplessly your new identity totters. If you are lucky enough to study Farsi, you may realize that not all beautiful poetry is written in your mother tongue and that Persian epics written in the Sasanian Empire are as beautiful as poems of the Tang Dynasty. If you happen to study Spanish you may realize that what you thought is unique and an aspect of your culture has a similar counterpart in another culture, that the Porto Rican Morcilla is almost identical to the Korean Sundae. If Russian is your language, you may realize that not all the important battles that change the course of human history were fought on your native land, that the Russian defeat of the Golden Horde at the field of Kulikobo is no less significant than the Reconquest of Granada in Spain. Can’t you do this by reading history? One may ask. Yes, but history written by whom, for whom? Because you see, after learning a language, if you care enough, part of you becomes a member of the tribe to which the language belongs. And that cultural schizophrenia can be truly excruciating. That pain, however, cannot be easily offset by the better chances of employment in the job market by the better chances of employment in the job market or the simple pleasure of impressing your friends at the dinner table with political anecdotes played out in five different languages. Why, then, would anyone who’s not a crazy masochist want to learn a foreign language? Yes, to communicate with people. Yes, to travel to different places. Yes, to advance your career in a globalized world. Yes, it is good for your brain. But more importantly, as potentially excruciating as it is for those curious enough to see the world as it is and those brave enough to tear down the veils of bigotry instead of hiding behind the lingustic barrier and refusing to step forward and know your fellow human beings or even the so-called enemie. I am by no means accusing those not fond of foreign languages of being cowards if anything they have to be forever more on their guard of the bigotries the fatuities and the language barrier and constantly seek more reliable sources of information indeed the pursuit of knowledge is almost by definition a sort of masochism and language learning is no exception but in such pain and perhaps only in such pain can we overcome misunderstandings bridge cultures and civilizations and find a world of peace and prosperity.</p>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>语言</tag>
        <tag>youtube</tag>
      </tags>
  </entry>
  <entry>
    <title>我的Mac上安装了什么软体</title>
    <url>/post/efa67fef.html</url>
    <content><![CDATA[<p>这些软体也许我是非它们不可，<br><a href="https://www.sublimetext.com/">Sublime Text</a>(文本编辑器)、<a href="https://apps.apple.com/us/app/pure-paste/id1611378436?mt=12">Pure Paste</a>(复制文本时清除格式)、<a href="https://apps.apple.com/us/app/moom/id419330170?mt=12">Moom</a>(窗口布局)、<a href="https://www.alfredapp.com/">Alfred</a>(基于workflow的效率工具)、<a href="https://github.com/oldj/SwitchHosts">SwitchHost</a>(切换hosts文件)、<a href="https://www.snipaste.com/">Snipaste</a>(屏幕截图工具)、<a href="https://www.renfei.org/snippets-lab/">SnippetsLab</a>(代码片段工具)、<a href="https://calibre-ebook.com/">Calibre</a>(电子书管理工具)、<a href="https://apps.apple.com/cn/app/runcat/id1429033973?mt=12">RunCat</a>(菜单栏挂件 &amp; 系统用量工具)、<a href="https://obsidian.md/">Obisidian</a>(笔记工具)、<a href="https://www.spotify.com/us/download/mac/">Spotify</a>(🎵)。</p>
<span id="more"></span>
<p>以及苹果自带的Mail、Reminders、Calendar。</p>
]]></content>
      <categories>
        <category>productivity</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos单机搭建Kafka</title>
    <url>/post/911f542f.html</url>
    <content><![CDATA[<h3 id="JAVA-环境-（JDK-1-8）"><a href="#JAVA-环境-（JDK-1-8）" class="headerlink" title="JAVA 环境 （JDK 1.8）"></a>JAVA 环境 （JDK 1.8）</h3><ol>
<li><p>下载安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-cookies --no-check-certificate --header <span class="string">&quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot;</span> <span class="string">&quot;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/java/</span><br></pre></td></tr></table></figure></li>
<li><p>解压至安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local/java/</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li><p>设置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在末尾添加环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/jdk1.8.0_171</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>添加软链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/java/jdk1.8.0_171/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure></li>
<li><p>检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line"></span><br><span class="line">java version <span class="string">&quot;1.8.0_141&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_141-b15)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><ol>
<li>在<a href="https://zookeeper.apache.org/releases.html#download">官网</a>进入Download获得下载链接🔗<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dlcdn.apache.org/zookeeper/zookeeper-3.5.10/apache-zookeeper-3.5.10-bin.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>解压到指定位置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xf apache-zookeeper-3.5.10-bin.tar.gz</span><br><span class="line"><span class="built_in">cp</span> apache-zookeeper-3.5.10-bin ~/workspace/zookeeper</span><br></pre></td></tr></table></figure></li>
<li>配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure></li>
<li>修改配置文件，修改了dateDir位置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[rin@localhost conf]$ <span class="built_in">cat</span> zoo.cfg | grep -v <span class="string">&quot;^#&quot;</span> | grep -v <span class="string">&quot;^$&quot;</span></span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/workspace/data</span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>启动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/zkServer.sh start</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="安装Kafka"><a href="#安装Kafka" class="headerlink" title="安装Kafka"></a>安装Kafka</h3><ol>
<li><p>下载安装包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/kafka/2.6.0/kafka_2.13-2.6.0.tgz</span><br></pre></td></tr></table></figure></li>
<li><p>解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf kafka_2.13-2.6.0.tgz</span><br><span class="line">mv kafka_2.13-2.6.0 /home/kafka</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑config&#x2F;server.propeties, 只调整了log的位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[rin@localhost config]$ <span class="built_in">cat</span> server.properties | grep -v <span class="string">&quot;^#&quot;</span> | grep -v <span class="string">&quot;^$&quot;</span></span><br><span class="line">broker.id=0</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">log.dirs=/var/log/kafka-logs</span><br><span class="line">num.partitions=1</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">log.retention.hours=168</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">zookeeper.connect=localhost:2181</span><br><span class="line">zookeeper.connection.timeout.ms=18000</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./kafka-server-start.sh ../config/server.properties &amp;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>部署完成测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kafka bin]<span class="comment"># ./kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test</span></span><br><span class="line"><span class="comment">#查看本机的topic</span></span><br><span class="line">[root@kafka bin]<span class="comment"># ./kafka-topics.sh --list --bootstrap-server localhost:9092</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="comment">#发送消息到test</span></span><br><span class="line">[root@kafka bin]<span class="comment"># ./kafka-console-producer.sh --broker-list localhost:9092 --topic test</span></span><br><span class="line">&gt;aaa</span><br><span class="line">&gt;bbb</span><br><span class="line">&gt;ccc</span><br><span class="line"><span class="comment">#开启新的终端，进行读取消息测试，“--from-beginning”表示从开头读取</span></span><br><span class="line">[root@kafka bin]<span class="comment"># ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</span></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br></pre></td></tr></table></figure>

<h4 id="开放Kafka服务端口"><a href="#开放Kafka服务端口" class="headerlink" title="开放Kafka服务端口"></a>开放Kafka服务端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 9092 是kafka的端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=9092/tcp --permanent</span><br><span class="line"><span class="comment">#重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment"># 确认开启端口</span></span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line">9092/tcp</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Python模块和包管理</title>
    <url>/post/55c2460.html</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>在 Python 中每一个 .py 都可以视作一个模块（module），而每一个包含 <strong>init</strong>.py 的目录则可以视作包（packge）。</p>
<p>在 one.py 中简单定义了一个函数 One:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def One():</span><br><span class="line">    print(&quot;module one&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def OneOne():</span><br><span class="line">    print(&quot;module one/one&quot;)</span><br></pre></td></tr></table></figure>
<p>如果我们想要在 main.py 中使用的话，那么可以直接 import，这种方式也称之为“模块导入”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import packs</span><br><span class="line"></span><br><span class="line">packs.one.One()</span><br></pre></td></tr></table></figure>
<p>运行后就会打印 module one，另外也可以看到在 packs 目录下生成一个 <strong>pycache</strong> 的新目录，这是编译后中间文件，可以提升模块载入速度。</p>
<p>除了这种全局导入外，还可以在局部作用域导入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    from packs.one import One</span><br><span class="line">    One()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<h3 id="init-文件"><a href="#init-文件" class="headerlink" title="init 文件"></a>init 文件</h3><p><strong>init</strong>.py 每当导入当前包的模块的时候就会运行一次。<br>我们可以再 <strong>init</strong>.py 输入导出的模块，外部使用的就不需要很长的导入路径了。</p>
<p>修改 packs&#x2F;__init__py 为如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from .one import One</span><br></pre></td></tr></table></figure>
<p>print(“packs one imported”)<br>那么在 main.py 中就可以这样使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from packs import One</span><br></pre></td></tr></table></figure>
<p>One()<br>或者这样子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import packs</span><br><span class="line"></span><br><span class="line">packs.One()</span><br></pre></td></tr></table></figure>

<h3 id="相对路径和绝对路径引用"><a href="#相对路径和绝对路径引用" class="headerlink" title="相对路径和绝对路径引用"></a>相对路径和绝对路径引用</h3><p>这种带有相对路径的导入路径 from .XXX，这种代表从当前的 XXX 模块中导入名称。<br>如果想要在当前模块中使用上一层的 packs&#x2F;one.py 就可以使用 from ..one import One 的方式。</p>
<p>以此类推，那么 … 代表更上一级。</p>
<p>但是这种方式还是有问题的，如果项目深度太大就容易写太多 .，还有一种方式就是绝对路径引用，这里的绝对路径是指相对项目根目录而言的。</p>
<h3 id="模块搜索顺序"><a href="#模块搜索顺序" class="headerlink" title="模块搜索顺序"></a>模块搜索顺序</h3><p>自己写的包名肯定可能和第三方或者标准库同名，不过这种同名通常没有问题。因为 python 会优先在当前目录搜索然后在环境变量的搜索路径，之后才是标准库和第三方包。</p>
<p>这个和 linux $PATH 的环境变量一样，按照顺序来搜索。一旦导入每个模块就有全局的命名空间，第二次再次加载就会使用缓存。</p>
<p>这个路径搜索方式和 nodejs 有些区别，nodejs 是一旦同名，优先标准库，如果自定义一个 http 模块，那么永远不会被加载。</p>
<h3 id="pip-包管理工具"><a href="#pip-包管理工具" class="headerlink" title="pip 包管理工具"></a>pip 包管理工具</h3><p>包管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line"># 最新版本</span><br><span class="line">pip install Django</span><br><span class="line"># 指定版本号</span><br><span class="line">pip install Django==2.0.0</span><br><span class="line"># 最小版本</span><br><span class="line">pip install &#x27;Django&gt;=2.0.0&#x27;</span><br><span class="line"></span><br><span class="line"># 升级包</span><br><span class="line">pip install --upgrade Django</span><br><span class="line"># 卸载包</span><br><span class="line">pip uninstall SomePackage</span><br><span class="line"># 搜索包</span><br><span class="line">pip search SomePackage</span><br><span class="line"># 显示安装包信息</span><br><span class="line">pip show</span><br><span class="line"># 查看指定包的详细信息</span><br><span class="line">pip show -f SomePackage</span><br><span class="line"># 列出已安装的包</span><br><span class="line">pip list</span><br><span class="line"># 查看可升级的包</span><br><span class="line">pip list -o</span><br></pre></td></tr></table></figure>
<p>包依赖锁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirement.txt # 锁版本</span><br><span class="line">pip install -r requirement.txt # 指定安装版本</span><br><span class="line">pip install --user install black # 安装到用户级目录</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tech</category>
        <category>language</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
